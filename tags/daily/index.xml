<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Daily on 0opsdc</title>
    <link>https://oopsdc.com/tags/daily/</link>
    <description>Recent content in Daily on 0opsdc</description>
    <image>
      <url>https://oopsdc.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://oopsdc.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Aug 2022 20:27:10 +0800</lastBuildDate><atom:link href="https://oopsdc.com/tags/daily/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MD5</title>
      <link>https://oopsdc.com/post/md5/</link>
      <pubDate>Sat, 13 Aug 2022 20:27:10 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/md5/</guid>
      <description>简介 MD5，即Message-Digest Algorithm 5，MD5信息摘要算法。
这是一种典型的哈希函数/散列函数，会将任意消息内容变为长度固定的散列值，任何输入内容都将被输出一个长度固定为128bit的MD5值，同一个输入消息的输出结果始终相同。
MD5数据的128bit散列值分为4部分，用4个幻数设定其初始值，4个幻数在内存地址上从低到高为：
幻数 内存地址 A 01 23 45 67 B 89 ab cd ef C fe dc ba 98 D 76 54 32 10 标准幻数总共为4*32=128bit。
MD5算法生成散列值的过程总共分为三步：1、填充对齐；2、分块；3、多轮压缩。
1、填充补齐：需要将数据补充为512bit的整数倍，在补齐数据中采用小端格式，最后64bit固定用于表示原始数据大小，中间剩下的bit第一个填1，其余均为0。若数据为1000bit，不足够存放64bit表示原始数据大小的数据，则补齐到512的三倍即可。
2、分块：分为512bit的数据块。
3、多轮压缩：将当前散列值的4部分各复制一份，分别用a、b、c、d表示，压缩共有4轮，每轮压缩过程使用数据块和a、b、c、d进行一系列与、或、非、循环移位的位操作，将a、b、c、d各自更新4次，4轮压缩一共更新16次。完成4轮压缩后，将最后得到的a、b、c、d分别加回到当前散列值的4个部分，散列值被更新。之所以叫压缩，是因为这个过程实际上在使用512bit的数据块来更新128bit的散列值，信息被压缩了，然后再使用后续大块进行相同操作，唯一不同点在于此时散列值初始值为前一个大块的最终值。
在所有大块上完成多轮压缩后，散列值更新为最终输出的MD5值，将这4部分合起来并变换为大端数即为最终输出的MD5值。
MD5信息摘要算法于1992年公开，其主要目的在于取代MD4算法，1996年后MD5算法被证实存在弱点，可以被加以破解，2004年MD5算法被证实无法防止碰撞，不适用于SSL公开密钥、数字签名等安全性认证。
应用场景 文件校验
数据库字段加密
如何攻击 MD5只是一个产生消息摘要的散列函数，而非加密算法，这个过程有信息损失且不可逆推。举例：1 | 1 = 1，但是不能倒推原始数据。
以鸽笼原理举例，一定会有同一个笼子至少有两只鸽子，引申出碰撞的概念。
原像攻击 这是对MD5的第一个基本安全要求，即找到任意一个能产生这个MD5值的消息，不过到今天也没有一个通用的可行方案。
暴力穷举：MD5值的范围在0~2^128^之间，理论上可行，但工程上不现实。
第二原像攻击 如果给定一个消息，能不能再找到另外一个MD5值相同的消息呢？
抗第二原像攻击（抗弱碰撞性）是对MD5的第二个基本安全性要求，除了在MD4弱消息上可行，对于MD5目前并没有有效的可行方案。
抗碰撞性（最不具安全性） 也叫抗强碰撞性，是对MD5的第三个基本安全性要求。
这个特性继续放宽了攻击标准，不指定MD5值和消息，只要找出两个MD5值相同的消息即可。
之前的研究很长时间都困在“伪碰撞”的范围，真正的突破在2005年山东大学王小云团队的&amp;quot;How to Break MD5 and Other Hash Functions&amp;quot;论文，研究思路为基于模块化差分，大体思路为先找到局部碰撞，然后分析差分如何传播，找到差分路径，再利用消息修改技术得到能产生碰撞的消息对。
和MD5算法本身相比，寻找碰撞的方法要抽象、复杂得多，但这也正是信安领域的魅力。
这个方法在大约15~60min内找到了碰撞，从学术角度看，MD5大势已去，但从工程角度而言，虽然可以快速找到大量MD5碰撞，但这两个碰撞的消息是根据差分路径和消息修改精心构造而来，基本上都是没有实际意义的乱码，很难想象会对MD5的工程应用造成什么直接影响。
在王小云团队的研究基础上，2007年Marc Stevens在硕士论文中交付了两项新成果：1、用一个内容在几秒钟内生成另外两个MD5值一样，但内容不同的消息，重要的是生成的内容可以有意义，该成果有一个叫fastcoll的软件，可通过该软件生成MD5值相同且可以正常打开的图片，但仔细观察文本就会发现其结尾数据并不相同，这被称为相同前缀碰撞，原始内容作为前缀，然后不断尝试构造两个不同的后缀数据，直到最后两者MD5相同，前缀数据保留了内容本身的意义。换个概念来讲，若用可执行程序作为前缀，攻击者可绕过审核发布钓鱼软件，只需让软件内部做一个判定，如本程序最后1bit为1执行正常行为，0执行恶意行为，正常版本通过检测后再用恶意版本进行替换，若只依赖于MD5值判断的话将无法检测到替换的发生。相同前缀生成的可执行文件代码一样，只是触发条件不同，但是在杀毒过程中还是有可能发现可疑行为，所以最好情况是正常版本和恶意版本为两个不相干的程序；2、自由选择前缀消息内容，生成两个MD5值一样但前缀内容不同的文件，称之为选择前缀碰撞，其还会对使用MD5的数字签名产生巨大威胁。
文章许可：本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。</description>
    </item>
    
    <item>
      <title>WSL</title>
      <link>https://oopsdc.com/post/wsl/</link>
      <pubDate>Sat, 13 Aug 2022 20:27:10 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/wsl/</guid>
      <description>简介 基本命令：
WSL 的基本命令 | Microsoft Docs
位置迁移 先导出再导入即可实现迁移。
1 关闭系统 确认系统运行情况：
wsl --list --verbose # 或 wsl -l -v 关闭系统：
wsl --shutdown 2 迁移 导出到事先创建好的D:\Kali目录：
# wsl --export &amp;lt;系统名&amp;gt; &amp;lt;导出文件路径&amp;gt; wsl --export kali-linux D:\Kali\Kali.tar 导入：
# wsl --import &amp;lt;系统名&amp;gt; &amp;lt;安装位置&amp;gt; &amp;lt;导入文件位置&amp;gt; &amp;lt;WSL版本号&amp;gt; wsl --import Kali D:\Kali D:\Kali\Kali.tar --version 2 删除迁移前的系统：
wsl -l -v # 结果如下 NAME STATE VERSION * kali-linux Stopped 2 Kali Stopped 2 # 删除第一个，即迁移前的系统 wsl --unregister kali-linux 完成迁移。</description>
    </item>
    
    <item>
      <title>博客搭建</title>
      <link>https://oopsdc.com/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 12 Jun 2022 12:29:53 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>博客搭建 hugo Hugo官方网站：https://gohugo.io
本文以PaperMod主题为例，官方文档：Installation · adityatelange/hugo-PaperMod Wiki (github.com)
需求准备 Hugo：Releases · gohugoio/hugo (github.com)
安装步骤 1.解压压缩包 2.配置环境变量 D:\Env\hugo_0.83.1 3.初始化博客 官方文档推荐我们使用易读性更高的yml格式初始化博客。
hugo new site &amp;lt;name of site&amp;gt; -f yml 4.指定主题 在config.yml文件中设置主题。
theme: PaperMod 5.本地启动 先在本地看看网站跑起来的效果
hugo server 6.创建GitHub仓库 具体操作详见之后的hexo主题教学。
7.修改baseUrl 将config.yml文件中的baseUrl修改为刚刚创建的仓库。
baseURL: &amp;#34;https://&amp;lt;username&amp;gt;.github.io/&amp;#34; 8.生成public文件夹 public中包含所有静态页面的内容，我们需要生成这个文件夹并上传到远程仓库中，完成博客部署。
hugo 9.push到远程仓库 # 配置代理 git config --global http.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; git config --global https.proxy socks5://127.0.0.1:&amp;lt;port&amp;gt; # 更改默认分支 git push -u origin main # push文件 cd public git init git add .</description>
    </item>
    
    <item>
      <title>LxRunOffline使用手册</title>
      <link>https://oopsdc.com/post/lxrunoffline/</link>
      <pubDate>Sat, 28 Aug 2021 17:31:36 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/lxrunoffline/</guid>
      <description>一、简介 WSL有多香就不介绍了，但其原生命令较为简陋、默认安装在C盘，稍有不足。而LxRunOffline能够安装任意发行版系统到任意目录，且具备转移已安装WSL目录、备份等功能，是一个极好的WSL管理软件。
项目地址：GitHub - DDoSolitary/LxRunOffline: A full-featured utility for managing Windows Subsystem for Linux (WSL)
二、安装LxRunOffline 常规安装：下载项目，手动安装 通过Chocolatey安装： choco install lxrunoffline 通过Scoop安装： scoop bucket add extras scoop install lxrunoffline LxRunOffline参数介绍：
l , list - 列出所有已安装的发行版。gd , get-default - 获取 bash.exe 使用的默认发行版。sd , set-default - 设置 bash.exe 使用的默认发行版。i , install - 安装新的发行版。sd , set-default - 设置 bash.exe 使用的默认发行版。ui , uninstall - 卸载发行版。rg , register - 注册现有的安装目录。ur , unregister - 取消注册发行版但不删除安装目录。m , move - 将发行版移动到新目录。d , duplicate - 在新目录中复制现有发行版。e , export - 将发行版的文件系统导出到.</description>
    </item>
    
    <item>
      <title>Scoop使用手册</title>
      <link>https://oopsdc.com/post/scoop%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</link>
      <pubDate>Mon, 23 Aug 2021 23:31:36 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/scoop%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</guid>
      <description>Scoop简介 Scoop是一个包管理工具，类似Ubuntu的apt和Mac的homebrew，只需通过一条命令即可快速完成软件的下载、安装和配置等步骤。
项目地址：GitHub - lukesampson/scoop: A command-line installer for Windows.
Scoop安装 没什么问题的话，大部分的电脑都能直接安装scoop，有问题的话请参考官方文档和网络资料自行解决，本文仅描述scoop的安装过程及实际安装遇到的问题。
注：请确保自身有代理环境，也可自行查找镜像源安装。
默认安装 官方给出的安装命令如下，只需打开powershell粘贴并执行即可，scoop将被默认安装在C:\User\&amp;lt;username&amp;gt;\scoop目录：
Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&amp;#39;https://get.scoop.sh&amp;#39;) # 或下述命令，任一条均可 iwr -useb get.scoop.sh | iex 安装完成后，可通过输入scoop help命令查看命令帮助，确认是否安装成功。
更改scoop安装位置 在安装scoop前，可先通过配置环境变量改变scoop安装路径：
$env:SCOOP=&amp;#39;D:\&amp;lt;dirname&amp;gt;&amp;#39; [Environment]::SetEnvironmentVariable(&amp;#39;SCOOP&amp;#39;, $env:SCOOP, &amp;#39;User&amp;#39;) 若已经安装scoop，则仅需在执行上述命令后，将原目录所有文件复制到新指定的目录即可。
更改scoop全局程序安装位置 $env:SCOOP_GLOBAL=&amp;#39;D:&amp;lt;dirname&amp;gt;&amp;#39; [Environment]::SetEnvironmentVariable(&amp;#39;SCOOP_GLOBAL&amp;#39;, $env:SCOOP_GLOBAL, &amp;#39;Machine&amp;#39;) 如果直接执行上述命令可能会报错，原因在于权限不够，使用Windows+X，选择以管理员身份打开powershell，再次运行命令即可。
多线程下载 查阅资料的时候，大部分文章都推荐安装aria2实现多线程下载，提高下载速度，命令如下：
scoop install aria2 安装Typora 以下是通过scoop安装Typora的流程，先使用命令搜索一下软件信息：
scoop search typora 会有一个报错，大意为typora在extras软件库中，要求我们先安装对应软件库。按照要求执行命令添加软件库：
scoop bucket add extras 此时却又报错，提示需要从GitHub拉取项目，需要我们先安装git。安装git:
scoop install git 下载失败并报错，但之前都能正常下载，目前只安装了一个aria2，先禁用了看看：
scoop config aria2-enabled false aria2默认配置：
aria2-enabled (默认值: true)aria2-retry-wait (默认值: 2)aria2-split (默认值: 5)aria2-max-connection-per-server (默认值: 5)aria2-min-split-size (默认值: 5M) 然后再下载git，成功下载，但是在安装软件库时又报错了，显示无法访问GitHub仓库，这可是个老问题了，项目部署经常遇到，检查代理没问题，那么就给git配个代理试试：</description>
    </item>
    
    <item>
      <title>如何拥有多个GitHub Pages并配置子域名</title>
      <link>https://oopsdc.com/post/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%A4%9A%E4%B8%AAgithub-pages%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Sat, 21 Aug 2021 16:48:19 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/%E5%A6%82%E4%BD%95%E6%8B%A5%E6%9C%89%E5%A4%9A%E4%B8%AAgithub-pages%E5%B9%B6%E9%85%8D%E7%BD%AE%E5%AD%90%E5%9F%9F%E5%90%8D/</guid>
      <description>文章背景 突发奇想能不能配置多个GitHub Pages，然后分别给它们绑定一个子域名，说干就干。
博客搭建文章：博客搭建 | Atmet (oopsdc.tk)
GitHub Pages有三种类型：项目、用户和组织，项目站点连接到GitHub托管的特定项目，后两者连接到特定GitHub账户。用户只能创建一个用户主站，但可以有多个项目站点。
创建项目 创建一个新的名称为test的公开仓库。 进入仓库主页，点击Settings，点击左侧的Pages，选择Launch automatic page generator&amp;gt;Continue to layouts&amp;gt;Pubulish Page。（注：此处选择一个喜欢的主题即可） 搭建完成后可通过&amp;lt;usernmae&amp;gt;.github.io/test访问。 绑定子域名 一般而言，在购买一个域名后，我们可以使用它的子域名，如本博客的域名为oopsdc.tk，现在我想给新创建的test仓库绑定一个test.oopsdc.tk的子域名。
1.进入DNS服务商的控制台，此处以CloudFlare为例，点击新建一个CNAME，设置如下：
保存后进入第二步。
2.在test仓库中新建一个CNAME文件，内容如下：
test.oopsdc.tk 也可通过仓库中的Settings进行设置，选择Pages后，修改下面的Custom domain并保存即可。
文章许可：本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。</description>
    </item>
    
    <item>
      <title>Vulhub环境搭建</title>
      <link>https://oopsdc.com/post/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 20 Aug 2021 18:32:54 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/vulhub%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>安装环境 Ubuntu 20.04 环境配置 docker docker-compose 更换系统源 备份原文件：
mv /etc/apt/source.list /etc/apt/source.list.bak 使用以下任一命令创建并编辑source.list文件：
gedit /etc/apt/source.list vi /etc/apt/source.list vim /etc/apt/source.list	// 需使用 apt install vim 命令安装 文件内容如下：
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.</description>
    </item>
    
    <item>
      <title>GitHub不再支持密码验证解决方案</title>
      <link>https://oopsdc.com/post/github%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 19 Aug 2021 08:46:55 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/github%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>问题描述 在更新博客push本地资源时遇到如下报错：
remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead. 大意就是GitHub从13号起不再支持密码验证，需要使用个人token，官方解释是为了安全。
解决方案 进入GitHub首页后点击右上角的个人头像，选择Settings，在左侧选择Developer settings，然后选择Personal access tokens，选中之后点击Generate new token，我们可以设置token名、有效期及token的权限范围。仅需要仓库部署的话，我们就只需勾选repo，翻到最下面点击Gererate token。
然后保存好生成的token，因为退出页面后将不再显示，可以通过重新生成来重新获取。然后在push项目时，将输入的密码改为我们生成的token即可。
文章许可：本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。</description>
    </item>
    
    <item>
      <title>Kali安装Parallels Tools</title>
      <link>https://oopsdc.com/post/kali%E5%AE%89%E8%A3%85parallels-tools/</link>
      <pubDate>Wed, 18 Aug 2021 22:45:30 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/kali%E5%AE%89%E8%A3%85parallels-tools/</guid>
      <description>环境配置 本文环境信息如下：
Parallel Desktop 16 Business 16.5.0 (49183) Kali Linux 2021.2 64-Bit 系统安装 安装配置 安装Kali Linux的时候Parallels Desktop无法识别操作系统，需要我们手动选择Other Linux下的Kali Linux。
配置选项因人而异，此处不细讲。
在安装过程中可选择GNOME作为桌面环境，避免后面的踩坑。
更换国内源 # 备份原文件 mv /etc/apt/source.list /etc/apt/source.list.bak # 更换为清华源 vim /etc/apt/source.list # 输入以下内容 &amp;#34;deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free&amp;#34; &amp;#34;deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free&amp;#34; 安装Parallels Tools 把鼠标移到窗口的右上，有一个黄色的感叹符号，点击即可安装Parallels Tools。
# 检测光盘是否挂载成功 mount | grep iso9660 # 将安装文件拷贝至本地，此处的dirname为自己创建的目录名称 mkdir ~/&amp;lt;dirname&amp;gt; &amp;amp;&amp;amp; cp -r /media/cdrom0/* ~/&amp;lt;dirname&amp;gt; # 安装Parallels Tools cd ~/&amp;lt;dirname&amp;gt; &amp;amp;&amp;amp; .</description>
    </item>
    
    <item>
      <title>ATT&amp;CK实战一</title>
      <link>https://oopsdc.com/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</link>
      <pubDate>Wed, 21 Jul 2021 14:34:21 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/attck%E5%AE%9E%E6%88%98%E4%B8%80/</guid>
      <description>一、环境搭建 1.1 下载虚拟机文件 自行搜索。
1.2 环境介绍 开机密码：hongrisec@2019.
本次实验共3台主机，Win7作为Web服务器，是最先攻击点，Win2k3为内网域成员主机，Win2k8 R2为内网域控主机。
Kali：自主搭建，配置与Web服务器同一网段的IP，使用命令ifconfig eth0 &amp;lt;ip&amp;gt;即可。
Win7：双网卡，即存在内外网IP。外网网卡通过DHCP自动获取IP，内网网卡配置静态IP:192.168.52.143。服务器存在yxcms。分别与Kali(NAT模式)和内网两台主机(自定义VMnet2)连通。
Win2k3：只有内网网卡，IP:192.168.52.138，使用VMnet2。
Win2k8 R2：只有内网网卡，IP:192.168.52.141，使用VMnet2。
拓扑图如下：
安装完成之后在Win7主机上打开phpstudy开启Web服务。
二、信息收集 2.1 探测存活主机 命令：
nmap -sS -sV -O 192.168.106.0/24# 此处的IP为NAT模式下Win7和Kali自动获取到的IP# 参数说明sS	:	SYN半连接扫描，只进行前两次握手sV	:	显示服务器详细版本O	:	显示服务器操作系统(不太准确) 结果：
Nmap scan report for 192.168.106.150Host is up (0.00044s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.23 ((Win32) OpenSSL/1.0.2j PHP/5.4.45)3306/tcp open mysql MySQL (unauthorized)MAC Address: 00:0C:29:33:16:84 (VMware)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Microsoft Windows 2008|7|8.</description>
    </item>
    
    <item>
      <title>浅析APNs推送机制</title>
      <link>https://oopsdc.com/post/%E6%B5%85%E6%9E%90apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 20 Jul 2021 17:19:55 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/%E6%B5%85%E6%9E%90apns%E6%8E%A8%E9%80%81%E6%9C%BA%E5%88%B6/</guid>
      <description>APNs简述 Apple Push Notification server(APNs)，即苹果推送通知服务。
APNs出现需求 由于移动设备内存、CPU、电池容量等各种因素，iOS不允许APP进程常驻后台(时限大概为10min)。
当用户主动关闭APP或后台APP进入后台达到限定时长后，意味着该APP进程的结束，在一定程度上保证了手机的流畅度与使用时长。但这也同时意味着服务器无法主动和用户交互(如实时推送消息)，为了解决这个限制，苹果推出了APNs，允许设备和服务器分别与苹果的推送服务器保持长连接状态。
iOS通知 iOS通知分为本地通知和远程通知两类，APNs是远程通知功能的核心。
本地通知 由本地应用触发，一般是基于时间的通知形式，如闹钟、日历、待办事项等。
远程通知 通过自建服务器推送消息的通知形式。
APNs推送流程 苹果官方APNs概述:Local and Remote Notification Programming Guide: APNs Overview (apple.com)
以下为APNs推送流程图:
Provider:自建应用服务器 APNs:苹果APNs推送通知服务器 Device:苹果设备 Client App:应用 大致流程可分为以下4点:
苹果设备安装应用后会向APNs服务器进行注册，注册成功后APNs服务器返回一个deviceToken，且二者之间会维持一个基于SSL协议的TCP流通讯的长连接。 拿到deviceToken后设备会将其发送至自建应用服务器 有消息需要被推送时，自建服务器会将消息按指定格式结合deviceToken一并打包发送给APNs。 APNs将新消息推送至设备，并在设备屏幕上显示出来(因为设备和服务器之间维持了一个长连接) 结合上述过程可以发现，真正完成推送的是APNs服务器，消息一定是由APNs服务器推送给我们的设备，自建应用服务器只是将需要推送的消息告诉APNs服务器。至于如何维护消息队列或如何保证消息能被推送到指定设备上，这些功能都是由APNs实现的。
deviceToken deviceToken是一个APP安装在设备上的唯一标识符，一个APP在不同设备上的deviceToken不同，同一台设备重新安装同一个APP后deviceToken也会不同。
项目代码AppDelegate中有一个回调方法，当APNs注册成功后通过该回调方法可以获取到返回的deviceToken。
- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken APNs拿到这个包之后会验证包结构是否正确，验证无误后会提取其中的消息，再将消息推送至指定设备。
消息体结构如下:
{ &amp;#34;aps&amp;#34;:{ &amp;#34;alert&amp;#34;:{	// 显示在用户设备上的推送标题内容 &amp;#34;title&amp;#34;:&amp;#34;Test Request&amp;#34;, &amp;#34;body&amp;#34;:&amp;#34;This is a test msg.&amp;#34;, }, &amp;#34;badge&amp;#34;:5,	// 显示的数量(整形类型)，是在应用icon右上角显示的数量，提示有几条未读信息 &amp;#34;sound&amp;#34;:&amp;#34;default&amp;#34;	// 推送消息声 } } 其实这就是一个JSON结构体，上述代码只是一种简单消息体，详情可见苹果官方文档:Local and Remote Notification Programming Guide: Creating the Remote Notification Payload (apple.</description>
    </item>
    
    <item>
      <title>Arm开发板联网配置</title>
      <link>https://oopsdc.com/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 20 Jul 2021 12:17:34 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/arm%E5%BC%80%E5%8F%91%E6%9D%BF%E8%81%94%E7%BD%91%E9%85%8D%E7%BD%AE/</guid>
      <description>文章背景 使用S5P6818开发板时，有业务上云的需求，遂有本文，内容较少，仅涉及联网部分。
问题描述 插上网线后无法获取IP 配置静态IP后无法ping通外网 解决方案 分两步解决。
1.配置静态IP 方法一
命令行配置:
ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 方法二
写配置文件:
vi /etc/init.d/rcS # 网卡开机自启 ifconfig eth0 up ifconfig eth0 &amp;lt;ip&amp;gt; netmask &amp;lt;netmask&amp;gt; 2.配置网关及DNS服务器 完成第一步后，可以ping通局域网下的主机，但无法ping通外网，出现如下报错:
sendto: Network is unreachable 使用route命令查看路由表:
Kernel IP routing tableDestination Gateway Genmask Flags Metric Ref Use Iface&amp;lt;ip&amp;gt; * 255.255.255.0 U 0 0 0 eth0 发现没有网关，配置网关:
route add default gw &amp;lt;ip&amp;gt; 再使用route命令验证一下，确认配好。
之后便要配置DNS解析，在/etc目录下新建一个resolv.conf配置文件，内容如下:
#114 DNS服务器nameserver 114.114.114.114 #微软 DNS服务器nameserver 233.</description>
    </item>
    
    <item>
      <title>utterances博客评论插件</title>
      <link>https://oopsdc.com/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Tue, 20 Jul 2021 09:10:00 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/utterances%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
      <description>概述 utterances是一个基于GitHub issue，拥有多种主题的开源小组件，本文将简述使用如何在hugo博客部署utterances。
配置过程 新建仓库 新建一个公开的仓库，用于存放评论，名字随意。作者在此处创建一个名为utterances的公开仓库。
安装utterances GitHub Apps - utterances
点击安装即可，选择仓库：
安装完成后会自动跳转到官方页面。
在文件中添加插件 官方文档:utterances
修改footer.html文件，以PaperMod主题为例：
&amp;lt;footer class=&amp;#34;footer&amp;#34;&amp;gt; {{- if .Site.Copyright }} &amp;lt;span&amp;gt;{{ .Site.Copyright | markdownify }}&amp;lt;/span&amp;gt; {{- else }} &amp;lt;span&amp;gt;&amp;amp;copy; {{ now.Year }} &amp;lt;a href=&amp;#34;{{ &amp;#34;&amp;#34; | absLangURL }}&amp;#34;&amp;gt;{{ .Site.Title }}&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; {{- end }} &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Powered by &amp;lt;a href=&amp;#34;https://gohugo.io/&amp;#34; rel=&amp;#34;noopener noreferrer&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;Hugo&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;amp;middot;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;Theme &amp;lt;a href=&amp;#34;https://git.io/hugopapermod&amp;#34; rel=&amp;#34;noopener&amp;#34; target=&amp;#34;_blank&amp;#34;&amp;gt;PaperMod&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;script src=&amp;#34;https://utteranc.es/client.js&amp;#34; repo=&amp;#34;oopsdc/utterances&amp;#34; issue-term=&amp;#34;title&amp;#34; theme=&amp;#34;github-light&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; async&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/footer&amp;gt; 运行命令hugo server进入一篇文章即可查看评论插件效果。</description>
    </item>
    
    <item>
      <title>ProxyChains简单使用</title>
      <link>https://oopsdc.com/post/proxychains%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 09 Jul 2021 22:24:59 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/proxychains%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>概述 ProxyChains是一个Linux和Unix下的代理工具，允许TCP和DNS通过代理隧道，支持HTTP、SOCKS4、SOCKS5类型的代理服务器，且可配置多个代理。
ProxyChains通过用户自定义的代理列表强制连接指定的应用程序。
本文简述kali下如何通过ProxyChains使用Windows主机代理。
相关资料 GitHub项目地址 ProxyChains：haad/proxychains: proxychains - a tool that forces any TCP connection made by any given application to follow through proxy like TOR or any other SOCKS4, SOCKS5 or HTTP(S) proxy. Supported auth-types: &amp;ldquo;user/pass&amp;rdquo; for SOCKS4/5, &amp;ldquo;basic&amp;rdquo; for HTTP. (github.com)
ProxyChains-ng：rofl0r/proxychains-ng: proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project.</description>
    </item>
    
    <item>
      <title>自定义GitHub个人资料</title>
      <link>https://oopsdc.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 01 Jul 2021 21:33:33 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89github%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99/</guid>
      <description>概述 想自定义一下GitHub的个人资料自述文件，遂有本文。
官方文档:管理个人资料自述文件 - GitHub Docs
关于自述文件:关于自述文件 - GitHub Docs
基本要求 创建一个与用户名相同的公开仓库 仓库根目录包含README.md文件 README.md文件不能为空 实现步骤 1.添加个人资料自述文件 1.新建仓库 在任意页面点击右上角的+号创建一个与自己用户名相同的仓库。当输入自己的用户名时，会出现一个小彩蛋。
2.添加仓库说明(可选) 3.设置仓库为公共属性 4.使用自述文件初始化仓库 5.创建仓库并编辑README文档 生成的自述文件已由模板预先填充，也可自定义表情、符号。
表情符号清单:🎁 Emoji cheat sheet for GitHub, Basecamp, Slack &amp;amp; more (webfx.com)
在想要换行的文本前后加上&amp;lt;br&amp;gt;和&amp;lt;/br&amp;gt;即可，如:
&amp;lt;br&amp;gt;This is test&amp;lt;/br&amp;gt; 2.删除个人资料自述文件 以下任一满足，个人资料自述文件就将会被删除:
自述文件为空或不存在 仓库为私有仓库 仓库名与用户名不匹配 文章许可：本文采用CC BY-NC-SA 4.0许可协议，转载请注明出处。</description>
    </item>
    
    <item>
      <title>XSS Challenges</title>
      <link>https://oopsdc.com/post/xss-challenges/</link>
      <pubDate>Thu, 10 Jun 2021 21:03:39 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/xss-challenges/</guid>
      <description>题目地址：https://xss-quiz.int21h.jp/
Stage #1 Hint: Very simple&amp;hellip;
直接输入测试语句：
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #2 Hint: Close the current tag and add SCRIPT tag&amp;hellip;
地址：XSS Challenges (by yamagata21) - Stage #2 (int21h.jp)
上测试语句：
&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; 然后审查元素，只需要把input标签闭合就能执行我们的语句了。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #3 Hint: The input in text box is properly escaped.
地址：XSS Challenges (by yamagata21) - Stage #3 (int21h.jp)
这个页面有两个input标签，先在搜索框输入我们的测试语句试试。
直接把我们的语句放到&amp;lt;b&amp;gt;标签里了，但是这旁边不是还有一个input标签吗。把两者的name互换一下即可。
Stage #4 Hint: Invisible input field.
地址：XSS Challenges (by yamagata21) - Stage #4 (int21h.jp)
审查元素发现有三个input标签，第三个标签的属性是hidden，把它改为text，然后把input标签闭合。
&amp;#34;&amp;gt;&amp;lt;sCript&amp;gt;alert(document.domain);&amp;lt;/Script&amp;gt; Stage #5 Hint: Length limited text box.</description>
    </item>
    
    <item>
      <title>网站镜像克隆</title>
      <link>https://oopsdc.com/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</link>
      <pubDate>Tue, 20 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/%E7%BD%91%E7%AB%99%E9%95%9C%E5%83%8F%E5%85%8B%E9%9A%86/</guid>
      <description>使用wget克隆网站 使用方法 我们可以使用man wget命令查看帮助文档。
操作命令及参数解释如下：
wget -m -p -E -k -K -np -v https://www.baidu.com/ # 参数解释 -m	:	镜像，选择该选项适用于Web站点 -p	:	页面获取的先决条件，该选项确保包含了请求的图片和css脚本文件被下载(可以更好复制html5站点) -E	:	适用于拓展，可以在本地另存一个html文件 -k	:	转换链接，确保文件本转换，适用于本地浏览 -K	:	转换备份文件，将以orig为后缀作为原始文件 -np	:	不要到上一层子目录中 -v	:	显示过程，不显示过程为-nv 克隆结果 # 克隆后在当前目录下会出现一个与网站同名的子目录，树形结构如下 www.baidu.com ├── index.html ├── index.html.orig └── robots.txt 0 directories, 3 files 使用HTTrack克隆网站 使用方法 httrack # 进入软件后需要输入项目名 baidu # 克隆后的存放地址 /home/oopsdc/Desktop # 要克隆的网站地址 www.baidu.com # 有6个选项，此处我们选2，具有向导递归层级的镜像网站 2 # 接下来的部分全选默认选项 默认回车 克隆结果 baidu ├── backblue.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://oopsdc.com/post/docker/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/docker/</guid>
      <description>Docker概述 镜像（image）：
一个只读模板。一个镜像可以用来创建多个Docker容器，好似Java中的类和对象，镜像是类，容器是对象。 容器（container）：
Docker利用容器独立运行一个或一组应用，容器是用镜像创建的运行实例。容器可以被启动、开始、停止、删除。每个容器都是相互个隔离的。也可以把容器看做一个简易版Linux环境(包括root用户权限、进程空间、用户空间和网络空间等)及运行在其中的应用程序。容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器最上面一层可读可写。 仓库（repository）：
仓库是集中存放镜像文件的场所。仓库和仓库注册服务器(registry)是有区别的，后者往往存在多个仓库，每个仓库又存在多个镜像，每个镜像有不同的标签。仓库分为公开仓库和私有仓库两种形式。最大的公开仓库是Docker Hub，国内最大的为阿里云、网易云等。 Docker安装 环境:CentOS 7
1.官方文档
2.yum安装gcc相关环境：
yum -y install gcc yum -y install gcc-c++ 3.卸载旧版本：
yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine 4.安装依赖包：
yum install -y yum-utils 5.设置镜像仓库：
# 错误 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ## 报错 [Errno 14] curl#35 - TCP connection reset by peer [Errno 12] curl#35 - Timeout # 推荐国内镜像 yum-config-manager --add-repo http://mirrors.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://oopsdc.com/post/golang/</link>
      <pubDate>Tue, 13 Apr 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/golang/</guid>
      <description>runoob教程:Go 语言教程 | 菜鸟教程 (runoob.com)
环境搭建 安装包官方下载地址：Downloads - The Go Programming Language (golang.org)
国内能打开的地址：Downloads - The Go Programming Language (google.cn)
Windows安装go 安装包下载 这里我选择下载msi文件的go1.16.2.windows-amd64.zip压缩包，然后放在环境目录D:\Env\go1.16.2\bin下解压。
环境配置 将go目录下的/bin路径添加到Path环境变量中，点击新建。
D:\Env\go1.16.2\bin 检测安装 打开cmd输入go。
hello-world 在工作目录创建hello.go文件。
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) } 使用go run命令运行:
go run hello.go go build生成二进制文件运行:
&amp;gt; go build .\hello.go &amp;gt; ls Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2021/3/15 10:50 2094592 hello.exe -a---- 2021/3/15 10:47 79 hello.</description>
    </item>
    
    <item>
      <title>GTK&#43;</title>
      <link>https://oopsdc.com/post/gtk&#43;/</link>
      <pubDate>Sat, 27 Mar 2021 22:06:50 +0800</pubDate>
      
      <guid>https://oopsdc.com/post/gtk&#43;/</guid>
      <description>GTK+简介 GTK+(Gnome Toolkit+)最初是为GIMP(GNU Image Manipulation Program)写的，在开发早期GIMP版本时，Peter Mattis 和 Spencer Kimball创建了GTK(GIMP Toolkit)作为Motif收费工具包的替代。当GTK获得了面向对象特性和可扩展性后，才变为了GTK+。
GTK+特点 稳定、跨平台、多语言绑定、接口丰富、与时俱进、算法丰富、移动嵌入式应用广泛.
学习手册 GTK+2手册：GTK+ 2 Reference Manual - GNOME Developer Center GTK+3手册：GTK+ 3 Reference Manual - GNOME Developer Center 中文手册：介绍 - 《GTK+3 参考手册》 - 书栈网 · BookStack GTK程序简介 使用gcc编译时加上pkg-config --cflags --libs gtk+-2.0，或者直接使用makefile编译
例: gcc demo.c -o demo `pkg-config --cflags --libs gtk+-2.0` 自动获得预处理参数，如宏定义、头文件位置 自动获得链接参数，如库、依赖库位置、文件名及其它参数 GTK程序基本框架 #include &amp;lt;gtk/gtk.h&amp;gt; int main(int argc, char *argv[]) { gtk_init(&amp;amp;argc, &amp;amp;argv);	// 初始化 // 代码区 gtk_main();	// 主事件循环 return 0; } 分析：</description>
    </item>
    
  </channel>
</rss>
